Best parameters for KNneighbors-Categorical data:
 {'memory': None, 'steps': [('scaler', StandardScaler()), ('knn', KNeighborsClassifier(n_neighbors=49))], 'verbose': False, 'scaler': StandardScaler(), 'knn': KNeighborsClassifier(n_neighbors=49), 'scaler__copy': True, 'scaler__with_mean': True, 'scaler__with_std': True, 'knn__algorithm': 'auto', 'knn__leaf_size': 30, 'knn__metric': 'minkowski', 'knn__metric_params': None, 'knn__n_jobs': None, 'knn__n_neighbors': 49, 'knn__p': 2, 'knn__weights': 'uniform'}
              precision    recall  f1-score   support

           0       0.68      0.75      0.71     17274
           1       0.72      0.63      0.67     16910

    accuracy                           0.69     34184
   macro avg       0.70      0.69      0.69     34184
weighted avg       0.70      0.69      0.69     34184


Best parameters for Logistical Regression-Categorical data:
 {'memory': None, 'steps': [('scaler', StandardScaler()), ('log', LogisticRegression(l1_ratio=0.0, max_iter=10000, penalty='elasticnet',
                   solver='saga'))], 'verbose': False, 'scaler': StandardScaler(), 'log': LogisticRegression(l1_ratio=0.0, max_iter=10000, penalty='elasticnet',
                   solver='saga'), 'scaler__copy': True, 'scaler__with_mean': True, 'scaler__with_std': True, 'log__C': 1.0, 'log__class_weight': None, 'log__dual': False, 'log__fit_intercept': True, 'log__intercept_scaling': 1, 'log__l1_ratio': 0.0, 'log__max_iter': 10000, 'log__multi_class': 'auto', 'log__n_jobs': None, 'log__penalty': 'elasticnet', 'log__random_state': None, 'log__solver': 'saga', 'log__tol': 0.0001, 'log__verbose': 0, 'log__warm_start': False}
              precision    recall  f1-score   support

           0       0.68      0.77      0.72     17274
           1       0.73      0.63      0.67     16910

    accuracy                           0.70     34184
   macro avg       0.70      0.70      0.70     34184
weighted avg       0.70      0.70      0.70     34184


Best parameters for Random Forest-Categorical data:
 {'memory': None, 'steps': [('forest', RandomForestClassifier(n_estimators=190))], 'verbose': False, 'forest': RandomForestClassifier(n_estimators=190), 'forest__bootstrap': True, 'forest__ccp_alpha': 0.0, 'forest__class_weight': None, 'forest__criterion': 'gini', 'forest__max_depth': None, 'forest__max_features': 'sqrt', 'forest__max_leaf_nodes': None, 'forest__max_samples': None, 'forest__min_impurity_decrease': 0.0, 'forest__min_samples_leaf': 1, 'forest__min_samples_split': 2, 'forest__min_weight_fraction_leaf': 0.0, 'forest__monotonic_cst': None, 'forest__n_estimators': 190, 'forest__n_jobs': None, 'forest__oob_score': False, 'forest__random_state': None, 'forest__verbose': 0, 'forest__warm_start': False}
              precision    recall  f1-score   support

           0       0.66      0.73      0.70     17274
           1       0.69      0.63      0.66     16910

    accuracy                           0.68     34184
   macro avg       0.68      0.68      0.68     34184
weighted avg       0.68      0.68      0.68     34184


Best parameters for SVC-Categorical data:
 {'memory': None, 'steps': [('scaler', StandardScaler()), ('svc', SVC(C=1, gamma=0.1))], 'verbose': False, 'scaler': StandardScaler(), 'svc': SVC(C=1, gamma=0.1), 'scaler__copy': True, 'scaler__with_mean': True, 'scaler__with_std': True, 'svc__C': 1, 'svc__break_ties': False, 'svc__cache_size': 200, 'svc__class_weight': None, 'svc__coef0': 0.0, 'svc__decision_function_shape': 'ovr', 'svc__degree': 3, 'svc__gamma': 0.1, 'svc__kernel': 'rbf', 'svc__max_iter': -1, 'svc__probability': False, 'svc__random_state': None, 'svc__shrinking': True, 'svc__tol': 0.001, 'svc__verbose': False}
              precision    recall  f1-score   support

           0       0.68      0.77      0.72     17274
           1       0.73      0.62      0.67     16910

    accuracy                           0.70     34184
   macro avg       0.70      0.70      0.70     34184
weighted avg       0.70      0.70      0.70     34184


Best parameters for KNneighbors-Non Categorical data:
 {'memory': None, 'steps': [('scaler', StandardScaler()), ('knn', KNeighborsClassifier(n_neighbors=49))], 'verbose': False, 'scaler': StandardScaler(), 'knn': KNeighborsClassifier(n_neighbors=49), 'scaler__copy': True, 'scaler__with_mean': True, 'scaler__with_std': True, 'knn__algorithm': 'auto', 'knn__leaf_size': 30, 'knn__metric': 'minkowski', 'knn__metric_params': None, 'knn__n_jobs': None, 'knn__n_neighbors': 49, 'knn__p': 2, 'knn__weights': 'uniform'}
              precision    recall  f1-score   support

           0       0.71      0.77      0.74     17274
           1       0.75      0.67      0.71     16910

    accuracy                           0.73     34184
   macro avg       0.73      0.72      0.72     34184
weighted avg       0.73      0.73      0.72     34184


Best parameters for Logistical Regression-Non Categorical data:
 {'memory': None, 'steps': [('scaler', StandardScaler()), ('log', LogisticRegression(l1_ratio=0.0, max_iter=10000, penalty='elasticnet',
                   solver='saga'))], 'verbose': False, 'scaler': StandardScaler(), 'log': LogisticRegression(l1_ratio=0.0, max_iter=10000, penalty='elasticnet',
                   solver='saga'), 'scaler__copy': True, 'scaler__with_mean': True, 'scaler__with_std': True, 'log__C': 1.0, 'log__class_weight': None, 'log__dual': False, 'log__fit_intercept': True, 'log__intercept_scaling': 1, 'log__l1_ratio': 0.0, 'log__max_iter': 10000, 'log__multi_class': 'auto', 'log__n_jobs': None, 'log__penalty': 'elasticnet', 'log__random_state': None, 'log__solver': 'saga', 'log__tol': 0.0001, 'log__verbose': 0, 'log__warm_start': False}
              precision    recall  f1-score   support

           0       0.71      0.78      0.74     17274
           1       0.75      0.67      0.71     16910

    accuracy                           0.73     34184
   macro avg       0.73      0.73      0.72     34184
weighted avg       0.73      0.73      0.72     34184


Best parameters for Random Forest-Non Categorical data:
 {'memory': None, 'steps': [('forest', RandomForestClassifier(n_estimators=120))], 'verbose': False, 'forest': RandomForestClassifier(n_estimators=120), 'forest__bootstrap': True, 'forest__ccp_alpha': 0.0, 'forest__class_weight': None, 'forest__criterion': 'gini', 'forest__max_depth': None, 'forest__max_features': 'sqrt', 'forest__max_leaf_nodes': None, 'forest__max_samples': None, 'forest__min_impurity_decrease': 0.0, 'forest__min_samples_leaf': 1, 'forest__min_samples_split': 2, 'forest__min_weight_fraction_leaf': 0.0, 'forest__monotonic_cst': None, 'forest__n_estimators': 120, 'forest__n_jobs': None, 'forest__oob_score': False, 'forest__random_state': None, 'forest__verbose': 0, 'forest__warm_start': False}
              precision    recall  f1-score   support

           0       0.69      0.69      0.69     17274
           1       0.69      0.69      0.69     16910

    accuracy                           0.69     34184
   macro avg       0.69      0.69      0.69     34184
weighted avg       0.69      0.69      0.69     34184


Best parameters for SVC-Non Categorical data:
 {'memory': None, 'steps': [('scaler', StandardScaler()), ('svc', SVC(C=1, gamma=0.1))], 'verbose': False, 'scaler': StandardScaler(), 'svc': SVC(C=1, gamma=0.1), 'scaler__copy': True, 'scaler__with_mean': True, 'scaler__with_std': True, 'svc__C': 1, 'svc__break_ties': False, 'svc__cache_size': 200, 'svc__class_weight': None, 'svc__coef0': 0.0, 'svc__decision_function_shape': 'ovr', 'svc__degree': 3, 'svc__gamma': 0.1, 'svc__kernel': 'rbf', 'svc__max_iter': -1, 'svc__probability': False, 'svc__random_state': None, 'svc__shrinking': True, 'svc__tol': 0.001, 'svc__verbose': False}
              precision    recall  f1-score   support

           0       0.71      0.80      0.75     17274
           1       0.76      0.66      0.71     16910

    accuracy                           0.73     34184
   macro avg       0.73      0.73      0.73     34184
weighted avg       0.73      0.73      0.73     34184


